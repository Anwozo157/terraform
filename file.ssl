provider "aws"  {
 region     = ""
 access_key = ""
 secret_key = ""

# 1. VPC
 resource "aws_vpc" "T-project" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "production" 
  } 
}

# 2. Internet gateway 
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.T-project.id

  tags = {
    Name = "main"
  }
}

# 3. Custom route table 
resource "aws_route_table" "T-project" {
  vpc_id = aws_vpc.example.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  route {
    ipv6_cidr_block        = "::/0"
    egress_only_gateway_id = aws_internet_gateway.gw.id
  }

  tags = {
    Name = "T-project"
  }
}

# 4. Subnet
resource "aws_subnet" "subnet-2" {
  vpc_id            = aws_vpc.T-project.id
  cidr_block        = "10.0.1.0/24"
  availibility_zone = "us-east-1a"
  tags = {
    Name = "prod-subnet"
  }
}

# 5. Associated Subnet with Route table 
resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.subnet-2.id
  route_table_id = aws_route_table.T-project.id
}

# 6. Create a security group to allow port 22, 80, 443
resource "aws_security_group" "allow_web" {
  name        = "allow_web-traffic"
  description = "Allow web traffic"
  vpc_id      = "aws_vpc.T-project.id"

  ingress {
    description      = "HTTPS"
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    cidr_blocks      = "0.0.0.0/0"
    ipv6_cidr_blocks = [aws_vpc.main.ipv6_cidr_block]
  }
 ingress {
    description      = "HTTP"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = "0.0.0.0/0"
    ipv6_cidr_blocks = [aws_vpc.main.ipv6_cidr_block]
  } 
  ingress {
    description      = "SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = "0.0.0.0/0"
    ipv6_cidr_blocks = [aws_vpc.main.ipv6_cidr_block]
  }
  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "allow_web"
  }
}

# 7. Create a network interface with a IP in the subnet that was created in step 4
resource "aws_network_interface" "web-server-nic" {
  subnet_id       = aws_subnet.subnet-2.id
  private_ips     = ["10.0.1.50"]
  security_groups = [aws_security_group.web.id]

  attachment {
    instance     = aws_instance.test.id
    device_index = 1
  }
}

# 8. assign an elastic IP to the network intrface in step 7
resource "aws_eip" "one" {
  vpc                       = true
  network_interface         = aws_network_interface.web-server-nic.id
  associate_with_private_ip = "10.0.1.10"
  depends_on                = [aws_internet_gateway.gw]
}

resource "aws_instance" "web-server-insatnce" {
  ami               = "ami-0747bdcabd34c712a"
  instance_type     = "t2.micro"
  availability_zone = "us-east-1a"
  key_name          = "T-project"

  netwrok_interface = {
    device_index         = 0
    network_interface_id =  aws_network_interface.web-server-nic.id
  }

   user_data = <<-EOF
                #!/bin/bash
                sudo apt update -y
                sudo apt install apache2 -y
                sudo systemctl start apache2
                sudo bash -c 'echo your very first server > /var/www/html/index/html'
                EOF


  tags = {
    name = "web-server"
  }
}
}
